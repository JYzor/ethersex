/*
 * scheduler/scheduler.h
 *
 * Copyright (c) 2013-2015 by Michael Brakemeier <michael@brakemeier.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * For more information on the GPL, please go to:
 * http://www.gnu.org/copyleft/gpl.html
 */

#ifndef SCHEDULER_H_
#define SCHEDULER_H_

#include <stdint.h>

#include "config.h"

/**
 * Return values for the scheduler functions.
 */
#define SCHEDULER_OK    0       /* Everything fine */
#define SCHEDULER_ERR   -1      /* Some error occurred */
#define SCHEDULER_AGAIN -2      /* Resource temporarily unavailable, e.g. no timer slot free */
#define SCHEDULER_INVAL -3      /* invalid argument, e.g. referenced timer_t func not found */

/**
 * Maximum value for timer interval
 */
#define SCHEDULER_INTERVAL_MAX  UINT16_MAX

/* Timer/Task states */
#define TIMER_DELETED   0x00
#define TIMER_SUSPENDED 0x01
#define TIMER_RUNNABLE  0x02
#define TIMER_RUNNING   0x04
/* reserved 0x08 */
#define TIMER_STATIC    0x10
#define TIMER_DYNAMIC   0x20
#define TIMER_ONESHOT   0x40
/* reserved 0x80 */

/**
 * typedef "timer_t as pointer to function (void) returning void" (from cdecl.org :-)
 */
typedef void (*timer_t)(void);

/**
 * timer control block structure
 */
typedef struct {
  timer_t       timer;
  uint16_t      delay;
  uint16_t      interval;
  uint8_t       state;
} timer_cb_t;

/*
 * all the timers in one array, generated by meta_magic_scheduler.m4
 */
extern timer_cb_t scheduler_timers[];

/*
 * max. number of timers in timer array, generated by meta_magic_scheduler.m4.
 */
extern const uint8_t scheduler_timer_max;

/**
 * Inititialize the scheduler.
 */
void scheduler_init(void);

/**
 * The scheduler loop.
 */
void scheduler_dispatch_timer(void);

/**
 * Suspend a timer.
 *
 * Suspend/stop a timer from normal operation. The timer will not expire
 * and the timer function will not be called until the timer is either
 * resumed or reset.
 *
 * @param func timer function to suspend.
 *
 * @return zero or a positive value on success, a negative value otherwise.
 */
int scheduler_timer_suspend(timer_t func);

/**
 * Resume a suspended timer.
 *
 * Resume/wake-up a suspended timer. The timer's delay counter is
 * *NOT* reset, the timer will resume where it has been suspended.
 *
 * @param func timer function to resume.
 *
 * @return zero or a positive value on success, a negative value otherwise.
 */
int scheduler_timer_resume(timer_t func);

/**
 * Reset/Restart a timer.
 *
 * Reset/restart a timer by setting the delay counter to the initial
 * interval. If the timer is currently suspended it will be resumed.
 *
 * @param func timer function to reset.
 *
 * @return zero or a positive value on success, a negative value otherwise.
 */
int scheduler_timer_reset(timer_t func);

/**
 * 'Millitick' the scheduler.
 *
 * We definitely want to inline all millitickers.
 */
__attribute__((always_inline)) static inline void scheduler_tick(void)
{
  for(uint8_t i = 0; i < scheduler_timer_max; i++)
  {
    /* check for runnable timer with delay greater zero (to prevent underflow in
     * case a timer could not be dispatched in time.
     */
    if((scheduler_timers[i].state & TIMER_RUNNABLE) && (scheduler_timers[i].delay > 0))
    {
      scheduler_timers[i].delay--;
    }
  }

  return;
}

#endif /* SCHEDULER_H_ */
